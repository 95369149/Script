{"config":"{\"icon\":\"curlybraces.square.fill\",\"color\":{\"red\":204,\"alpha\":0.7997138551376408,\"blue\":204,\"green\":0},\"name\":\"编码解码\"}","main":"class MyCodecAction {\n    constructor() {\n        this.text = $clipboard.text;\n\n        this.mappingChars = \"XKNWSPRMCTGZVDHF\"; // 默认映射字符串，可自定义修改加密 如:ABCDEFGHJKLMNPQR\n\n        this.charMap = {};\n        this.mappingChars.split('').forEach((char, index) => {\n            const binary = index.toString(2).padStart(4, '0');\n            this.charMap[char] = binary;\n        });\n\n        this.reverseCharMap = Object.fromEntries(\n            Object.entries(this.charMap).map(([k, v]) => [v, k])\n        );\n    }\n\n    letterDecode(str) {\n        let binaryString = \"\";\n        for (let i = 0; i < str.length; i++) {\n            if (!this.charMap[str[i]]) {\n                throw new Error(\"特殊字符解码失败: 输入包含未知字符\");\n            }\n            binaryString += this.charMap[str[i]];\n        }\n        let result = \"\";\n        for (let i = 0; i < binaryString.length; i += 8) {\n            let byte = binaryString.substr(i, 8);\n            result += String.fromCharCode(parseInt(byte, 2));\n        }\n        return result;\n    }\n\n    letterEncode(str) {\n        let binaryString = \"\";\n        for (let i = 0; i < str.length; i++) {\n            let charCodeBinary = str.charCodeAt(i).toString(2).padStart(8, '0');\n            binaryString += charCodeBinary;\n        }\n        let result = \"\";\n        for (let i = 0; i < binaryString.length; i += 4) {\n            let nibble = binaryString.substr(i, 4);\n            if (!this.reverseCharMap[nibble]) {\n                throw new Error(\"特殊字符编码失败: 无法转换某些字符\");\n            }\n            result += this.reverseCharMap[nibble];\n        }\n        return result;\n    }\n\n    async showMenu() {\n        const topLevelMenu = {\n            items: [\n                \"URL 编码/解码\",\n                \"UTF-8 编码/解码\",\n                \"Base64 编码/解码\",\n                \"Unicode 编码/解码\",\n                \"特殊字符编码/解码\"\n            ]\n        };\n        const { index: topLevelIndex } = await $ui.menu(topLevelMenu.items);\n        if (topLevelIndex === undefined) {\n            $ui.toast(\"无效内容/请重新选择\", 2);\n            return;\n        }\n        await this.delay(100);\n        const subLevelMenus = [\n            [\"URL 编码\", \"URL 解码\"],\n            [\"UTF-8 编码\", \"UTF-8 解码\"],\n            [\"Base64 编码\", \"Base64 解码\"],\n            [\"Unicode 编码\", \"Unicode 解码\"],\n            [\"特殊字符编码\", \"特殊字符解码\"]\n        ];\n        const { index: subLevelIndex } = await $ui.menu(subLevelMenus[topLevelIndex]);\n        if (subLevelIndex === undefined) {\n            $ui.toast(\"无效内容/请重新选择\", 2);\n            return;\n        }\n        await this.delay(100);\n        const finalIndex = topLevelIndex * 2 + subLevelIndex;\n        this.handleSelection(finalIndex);\n    }\n\n    handleSelection(index) {\n        try {\n            switch (index) {\n                case 0:\n                    this.text = encodeURIComponent(this.text);\n                    break;\n                case 1:\n                    this.decodeURIComponentWithCheck(\"URL\");\n                    break;\n                case 2:\n                    this.text = encodeURIComponent(this.text);\n                    break;\n                case 3:\n                    this.decodeURIComponentWithCheck(\"UTF-8\");\n                    break;\n                case 4:\n                    this.text = $text.base64Encode(this.text);\n                    break;\n                case 5:\n                    this.decodeBase64WithCheck();\n                    break;\n                case 6:\n                    this.text = this.text.split('').map(char => '\\\\u' + char.charCodeAt(0).toString(16).padStart(4, '0')).join('');\n                    break;\n                case 7:\n                    this.decodeUnicodeWithCheck();\n                    break;\n                case 8:\n                    this.text = this.letterEncode(this.text);\n                    break;\n                case 9:\n                    this.text = this.letterDecode(this.text);\n                    break;\n                default:\n                    $ui.toast(\"无效内容/请重新选择\", 2);\n                    return;\n            }\n            this.delay(100).then(() => {\n                this.copyToClipboard();\n            });\n        } catch (e) {\n            $ui.toast(e.message, 2);\n            return;\n        }\n    }\n\n    decodeURIComponentWithCheck(type) {\n        let decodedText = decodeURIComponent(this.text);\n        if (decodedText === this.text) {\n            throw new Error(`${type}解码失败/无有效的${type}编码字符串`);\n        }\n        this.text = decodedText;\n    }\n\n    decodeBase64WithCheck() {\n        let base64DecodedText = $text.base64Decode(this.text);\n        if (!base64DecodedText) {\n            throw new Error(\"Base64解码失败/无有效的Base64字符串\");\n        }\n        this.text = base64DecodedText;\n    }\n\n    decodeUnicodeWithCheck() {\n        let decodedText = this.text.replace(/\\\\u([\\dA-F]{4})/gi, function(match, grp) {\n            return String.fromCharCode(parseInt(grp, 16));\n        });\n        if (decodedText === this.text) {\n            throw new Error(\"Unicode解码失败/无有效的Unicode字符\");\n        }\n        this.text = decodedText;\n    }\n\n    copyToClipboard() {\n        $clipboard.text = this.text;\n        this.showResult();\n    }\n\n    showResult() {\n        let preview = this.text.length > 40 ? this.text.substring(0, 37) + '...' : this.text;\n        $ui.toast(`已复制到剪切板: ${preview}`, 2);\n    }\n\n    delay(ms) {\n        return new Promise(resolve => setTimeout(resolve, ms));\n    }\n\n    requestInput() {\n        $input.text({\n            placeholder: \"剪切板无内容，请输入文本…\",\n            handler: text => {\n                if (text === undefined || text === \"\") {\n                    $ui.toast(\"未输入任何内容\", 2);\n                    return;\n                }\n                this.text = text;\n                this.showMenu();\n            }\n        });\n    }\n\n    run() {\n        if (this.text !== undefined && this.text !== \"\") {\n            this.showMenu();\n        } else {\n            this.requestInput();\n        }\n    }\n}\n\nconst action = new MyCodecAction();\naction.run();","readme":"## 编码解码\n\n一个简单的文本编码和解码动作，它可以处理剪切板中的文本或用户输入的文本。用户可以选择进行URL、UTF-8、Unicode、Base64或自定义字符映射加密的编码或解码操作，处理后的结果会自动复制到剪切板。"}