{"config":"{\"icon\":\"curlybraces.square.fill\",\"color\":{\"red\":204,\"alpha\":0.7997138551376408,\"blue\":204,\"green\":0},\"name\":\"编码解码\"}","main":"class MyCodecAction {\n    constructor() {\n        this.text = $clipboard.text;\n        this.run();\n    }\n\n    async showMenu() {\n        const topLevelMenu = {\n            items: [\n                \"URL 编码/解码\",\n                \"UTF-8 编码/解码\",\n                \"Base64 编码/解码\",\n                \"Unicode 编码/解码\"\n            ]\n        };\n\n        const { index: topLevelIndex } = await $ui.menu(topLevelMenu.items);\n        if (topLevelIndex === undefined) return;\n\n        const subLevelMenus = [\n            [\"URL 编码\", \"URL 解码\"],\n            [\"UTF-8 编码\", \"UTF-8 解码\"],\n            [\"Base64 编码\", \"Base64 解码\"],\n            [\"Unicode 编码\", \"Unicode 解码\"]\n        ];\n\n        const { index: subLevelIndex } = await $ui.menu(subLevelMenus[topLevelIndex]);\n        if (subLevelIndex === undefined) return;\n\n        const finalIndex = topLevelIndex * 2 + subLevelIndex;\n        this.handleSelection(finalIndex);\n    }\n\n    handleSelection(index) {\n        try {\n            switch (index) {\n                case 0:\n                    this.text = encodeURIComponent(this.text);\n                    break;\n                case 1:\n                    this.decodeURIComponentWithCheck(\"URL\");\n                    break;\n                case 2:\n                    this.text = encodeURIComponent(this.text);\n                    break;\n                case 3:\n                    this.decodeURIComponentWithCheck(\"UTF-8\");\n                    break;\n                case 4:\n                    this.text = $text.base64Encode(this.text);\n                    break;\n                case 5:\n                    this.decodeBase64WithCheck();\n                    break;\n                case 6:\n                    this.text = this.text.split('').map(char => '\\\\u' + char.charCodeAt(0).toString(16).padStart(4, '0')).join('');\n                    break;\n                case 7:\n                    this.decodeUnicodeWithCheck();\n                    break;\n                default:\n                    $ui.toast(\"无效内容/请重新选择\", 2);\n                    return;\n            }\n        } catch (e) {\n            $ui.toast(e.message, 2);\n            return;\n        }\n        this.copyToClipboard();\n    }\n\n    decodeURIComponentWithCheck(type) {\n        let decodedText = decodeURIComponent(this.text);\n        if (decodedText === this.text) {\n            throw new Error(`${type}解码失败/无有效的${type}编码字符串`);\n        }\n        this.text = decodedText;\n    }\n\n    decodeBase64WithCheck() {\n        let base64DecodedText = $text.base64Decode(this.text);\n        if (!base64DecodedText) {\n            throw new Error(\"Base64解码失败/无有效的Base64字符串\");\n        }\n        this.text = base64DecodedText;\n    }\n\n    decodeUnicodeWithCheck() {\n        let unicodePattern = /\\\\u[\\dA-F]{4}/i;\n        if (!unicodePattern.test(this.text)) {\n            throw new Error(\"Unicode解码失败/无有效的Unicode编码\");\n        }\n        let decodedText = this.text.replace(/\\\\u([\\dA-F]{4})/gi, function(match, grp) {\n            return String.fromCharCode(parseInt(grp, 16));\n        });\n        if (decodedText === this.text) {\n            throw new Error(\"Unicode解码失败/内容与原文相同\");\n        }\n        this.text = decodedText;\n    }\n\n    copyToClipboard() {\n        $clipboard.text = this.text;\n        this.showResult();\n    }\n\n    showResult() {\n        let preview = this.text.length > 40 ? this.text.substring(0, 37) + '...' : this.text;\n        $ui.toast(`已复制到剪切板: ${preview}`, 2);\n    }\n\n    requestInput() {\n        $input.text({\n            placeholder: \"剪切板无内容,请输入文本…\",\n            handler: text => {\n                if (text === undefined || text === \"\") {\n                    $ui.toast(\"未输入任何内容\", 2);\n                    return;\n                }\n                this.text = text;\n                this.showMenu();\n            }\n        });\n    }\n\n    run() {\n        if (this.text !== undefined && this.text !== \"\") {\n            this.showMenu();\n        } else {\n            this.requestInput();\n        }\n    }\n}\n\nconst action = new MyCodecAction();","readme":"## 编码解码\n\n一个简单的文本编码和解码动作，它可以处理剪切板中的文本或用户输入的文本。用户可以选择进行URL、UTF-8、Unicode或Base64的编码或解码操作，处理后的结果会自动复制到剪切板。"}